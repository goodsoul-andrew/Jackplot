class Calculator {
     field ModifiedArray polynomCoefs;
     field int polynomDegree;
     field Array coefsArray;
     
     constructor Calculator new(ModifiedArray coefs) {
          let polynomCoefs = coefs;
          let polynomDegree = polynomCoefs.length() - 1;
          let coefsArray = polynomCoefs.getData();
          return this;
     }

     method int calculateY ( int x ) {
         return calculateYInScale(x, 1);
     }

     method int calculateYInScale( int x, int p) {
          var int degree;
          var int result;
          
          let degree = polynomDegree;
          let result = 0;
          while (true) {
               if (degree < 1) {
                    let result = result + Math.multiply(coefsArray[degree], p);
                    return result;
               }
               //let result = result + Math.divide(Math.multiply(coefsArray[degree], Calculator.pow(x, degree)), Calculator.pow(p, degree - 1));
               //let result = result + (coefsArray[degree] * Calculator.pow(x, degree) / Calculator.pow(p, degree - 1));
               let result = result + (coefsArray[degree] * Calculator.powWithScale(x, degree, p));
               let degree = degree - 1;
          }
          return result;
     }

     method ModifiedArray getCoefs() {
          return polynomCoefs;
     }

     function int pow ( int base, int degree ) {
          var int index;
          var int result;
          let index = 0;
          let result = 1;
          while (index < degree) {
               let result = result * base;
               let index = index + 1;
          }
          return result;
     }

     function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        return x;
    }

     function int powWithScale ( int base, int degree, int scale) {
          var int index;
          var int result;
          var int scaleIndex;
          
          if (base = 0) {
               return 0;
          }

          let index = 0;
          let scaleIndex = 0;
          let result = 1;
          while (index < degree) {
               if ((result > 0) | (result < 0)) {
                    if ((32000 / Calculator.abs(result)) < base) {
                         let result = result / scale;
                         let scaleIndex = scaleIndex + 1;
                    }
               }
               let result = result * base;
               let index = index + 1;
          }
          while (scaleIndex < (degree - 1)) {
               let result = result / scale;
               let scaleIndex = scaleIndex + 1;
          }
          return result;
     }

     method void dispose () {
          do polynomCoefs.dispose();
          do coefsArray.dispose();
          do Memory.deAlloc(this);
          return;
     }
}
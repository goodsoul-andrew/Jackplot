// просто замеч
class Plot {
    field int x;
    field int y;
    field int width;
    field int height;
    field int midX;
    field int midY;
    field int endX;
    field int endY;
    field int zeroX;
    field int zeroY;

    constructor Plot new(int x_, int y_, int width_, int height_) {
        let x = x_;
        let y = y_;
        let width = width_;
        let height = height_;
        let midX = x + width / 2;
        let midY = y + height / 2;
        let endX = x + width;
        let endY = y + height;
        let zeroX = midX;
        let zeroY = midY;
        return this;
    }

    method void drawCross ( ) {
        do Screen.drawLine(midX, y, midX, endY);
        do Screen.drawLine(x, midY, endX, midY);
        return;
    }

    method void drawArrowUp (int posX, int posY, int length) {
        var int i;
        let i = 1;
        while (i < 4) {
            do Screen.drawLine(posX + i, posY + i, posX + i, posY + length + i);
            do Screen.drawLine(posX - i, posY + i, posX - i, posY + length + i);
            let i = i + 1;
        }
        return;
    }

    method void drawArrowRight (int posX, int posY, int length) {
        var int i;
        let i = 1;
        while (i < 4) {
            do Screen.drawLine(posX - i, posY + i, posX - i - length, posY + i);
            do Screen.drawLine(posX - i, posY - i, posX - i - length, posY - i);
            let i = i + 1;
        }
        return;
    }

    method void drawBase ( ) {
        do drawCross();
        do drawArrowUp(midX, y, 10);
        do drawArrowRight(x + width, midY, 10);
        return;
    }

    method boolean isOnScreen ( int px, int py ) {
        return (x < px) & (px < endX) & (y < py) & (py < endY);
    }

    method void drawFunction (int scale, Calculator calculator) {
        var int actualX;
        var int actualY;
        var int matX;
        var int matY;
        
        let actualX = x;
        while (actualX < endX) {
            let matX = actualX - zeroX;
            //let matY = _test_func(matX, scale);
            let matY = calculator.calculateYInScale(matX, scale);
            let actualY = zeroY - matY;
            if (isOnScreen(actualX, actualY)) {
                do Screen.drawPixel(actualX, actualY);
            }
            let actualX = actualX + 1;
        }
        return;
    }

    method void moveRight (int s) {
        let zeroX = zeroX - s;
        return;
    }

    method void moveLeft (int s) {
        let zeroX = zeroX + s;
        return;
    }

    method void moveUp (int s) {
        let zeroY = zeroY + s;
        return;
    }

    method void moveDown (int s) {
        let zeroY = zeroY - s;
        return;
    }
}
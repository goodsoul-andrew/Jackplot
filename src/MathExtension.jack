class MathExtension {

    function int pow ( int base, int degree ) {
          var int index;
          var int result;
          let index = 0;
          let result = 1;
          while (index < degree) {
               let result = result * base;
               let index = index + 1;
          }
          return result;
     }

     function int powWithScale ( int base, int degree, int scale) {
          var int index;
          var int result;
          var int scaleIndex;
          
          if (base = 0) {
               return 0;
          }

          let index = 0;
          let scaleIndex = 0;
          let result = 1;
          while (index < degree) {
               if (~(result = 0)) {
                    if ((32000 / MathExtension.abs(result)) < base) {
                         let result = result / scale;
                         let scaleIndex = scaleIndex + 1;
                    }
               }
               let result = result * base;
               let index = index + 1;
          }
          while (scaleIndex < (degree - 1)) {
               let result = result / scale;
               let scaleIndex = scaleIndex + 1;
          }
          return result;
     }

     function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        return x;
     }

}
class Plot {
    field int startX;
    field int startY;
    field int width;
    field int height;
    field int endX;
    field int endY;
    field int zeroX;
    field int zeroY;
    field int scale;

    constructor Plot new(int x_, int y_, int width_, int height_, int scale_) {
        let startX = x_;
        let startY = y_;
        let width = width_;
        let height = height_;
        let endX = startX + width;
        let endY = startY + height;
        let zeroX = startX + width / 2;
        let zeroY = height / 2;
        let scale = scale_;
        return this;
    }

    method void drawCross () {
        if (((zeroX - startX) > -1) & ((endX - zeroX) > -1)) {
            do Screen.drawLine(zeroX, startY, zeroX, endY);
        }
        if (((zeroY - startY) > -1) & ((endY - zeroY) > -1)) {
            do Screen.drawLine(startX, zeroY, endX, zeroY);
        }
        return;
    }

    method void drawOnes() {
        if (((zeroX + scale - startX) > -1) & ((endX - zeroX - scale) > -1) & ((zeroY - 10 - startY) > -1) & ((endY - zeroY - 10) > -1)) {
            do Screen.drawLine(zeroX + scale, zeroY - 10, zeroX + scale, zeroY + 10);
        }
        if (((zeroY - scale - startX) > -1) & ((endY - zeroY - scale) > -1) & ((zeroX - 10 - startX) > -1) & ((endX - zeroX - 10) > -1)) {
            do Screen.drawLine(zeroX - 10, zeroY - scale, zeroX + 10, zeroY - scale);
        }
        return;
    }

    method void drawArrowUp (int posX, int posY, int length) {
        var int i;
        var int arrowWidth;

        let i = 1;
        let arrowWidth = 4;
        if ((zeroX - startX) < arrowWidth) {
            let arrowWidth = zeroX - startX;
        }
        if ((endX - zeroX) < arrowWidth) {
            let arrowWidth = endX - zeroX;
        }
        if (arrowWidth > 0) {
            while (i < arrowWidth) {
                do Screen.drawLine(posX + i, posY + i, posX + i, posY + length + i);
                do Screen.drawLine(posX - i, posY + i, posX - i, posY + length + i);
                let i = i + 1;
            }
        }
        return;
    }

    method void drawArrowRight (int posX, int posY, int length) {
        var int i;
        var int arrowWidth;
        
        let i = 1;
        let arrowWidth = 4;
        if ((zeroY - startY) < arrowWidth) {
            let arrowWidth = zeroY - startY;
        }
        if ((endY - zeroY) < arrowWidth) {
            let arrowWidth = endY - zeroY;
        }
        if (arrowWidth > 0) {
            while (i < arrowWidth) {
                do Screen.drawLine(posX - i, posY + i, posX - i - length, posY + i);
                do Screen.drawLine(posX - i, posY - i, posX - i - length, posY - i);
                let i = i + 1;
            }
        }
        return;
    }

    method void drawBase () {
        do drawCross();
        do drawOnes();
        do drawArrowUp(zeroX, startY, 10);
        do drawArrowRight(startX + width, zeroY, 10);
        return;
    }

    method boolean isOnScreen ( int px, int py ) {
        return (startX < px) & (px < endX) & (startY < py) & (py < endY);
    }

    method void drawFunction (Calculator calculator) {
        var int actualX;
        var int actualY;
        var int matX;
        var int matY;
        
        let actualX = startX;
        while (actualX < endX) {
            let matX = actualX - zeroX;
            let matY = calculator.calculateYInScale(matX, scale);
            let actualY = zeroY - matY;
            if (isOnScreen(actualX, actualY)) {
                do Screen.drawPixel(actualX, actualY);
            }
            let actualX = actualX + 1;
        }
        return;
    }

    method void moveRight (int s) {
        let zeroX = zeroX - s;
        return;
    }

    method void moveLeft (int s) {
        let zeroX = zeroX + s;
        return;
    }

    method void moveUp (int s) {
        let zeroY = zeroY + s;
        return;
    }

    method void moveDown (int s) {
        let zeroY = zeroY - s;
        return;
    }

    method void upScale(int s) {
        let scale = scale + s;
        return;
    }

    method void downScale(int s) {
        if ((scale - s) > 0) {
            let scale = scale - s;
        }
        return;
    }
}
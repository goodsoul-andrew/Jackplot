class Calculator {
     field ModifiedArray polynomCoefs;
     field int polynomDegree;
     field Array coefsArray;
     
     constructor Calculator new(ModifiedArray coefs) {
          let polynomCoefs = coefs;
          let polynomDegree = polynomCoefs.length() - 1;
          let coefsArray = polynomCoefs.getData();
          return this;
     }

     method int calculateYInScale( int x, int p) {
          var int degree;
          var int result;
          
          let degree = polynomDegree;
          let result = 0;
          while (true) {
               if (degree < 1) {
                    let result = result + (coefsArray[degree] * p);
                    return result;
               }
               //let result = result + (coefsArray[degree] * MathExtension.pow(x, degree) / MathExtension.pow(p, degree - 1));
               let result = result + (coefsArray[degree] * MathExtension.powWithScale(x, degree, p));
               let degree = degree - 1;
          }
          return result;
     }

     method void dispose () {
          do polynomCoefs.dispose();
          do coefsArray.dispose();
          do Memory.deAlloc(this);
          return;
     }
}